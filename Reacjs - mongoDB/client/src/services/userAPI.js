import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { API_URL } from "../config";

import { selectCurrenToken } from "../slices/auth.slice";

// Define a service using a base URL and expected endpoints
export const userAPI = createApi({
    reducerPath: "userManagement",
    // Tag types are used for caching and invalidation.
    tagTypes: ["UserList"],
    baseQuery: fetchBaseQuery({
        baseUrl: API_URL,
        prepareHeaders: (headers, { getState }) => {
            const token = selectCurrenToken(getState()); // Retrieve token from Redux state using selectToken selector
            if (token) {
                headers.append("Authorization", `${token}`);
            }
            headers.append("Content-Type", "application/json");
            return headers;
        },
    }),

    endpoints: (builder) => ({
        // Supply generics for the return type (in this case `FlowerApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        addUser: builder.mutation({
            query: (body) => {
                // const users = {
                //     password: body.password,
                //     fullname: body.name,
                //     email: body.email,
                //     phoneNumber: body.phone,
                //     retypePassword: body.retypePassword,
                //     DOB: body.DOB,
                //     gender: body.gender,
                // };

                return {
                    method: "POST",
                    url: `auth/register`,
                    body: body,
                };
            },
            invalidatesTags: [{ type: "UserList", id: "LIST" }],
        }),
        editUser: builder.mutation({
            query: (payload) => {
                //   const newBody = {
                //     fullname: payload.body.name,
                //     email: payload.body.email,
                //     phone_number: payload.body.phone,
                //     date_of_birth: payload.body.DOB,
                //     gender: payload.body.gender,
                //     active: payload.body.Status,
                //     role_id: RoleConstant[payload.body.UserType],
                //   };
                //   console.log(newBody);
                return {
                    method: "PUT",
                    url: `users/` + payload.id,
                    body: payload.body,
                };
            },
            invalidatesTags: (res, err, arg) => [{ type: "UserList", id: arg.id }],
        }),
        getUserById: builder.query({
            query: (id) => `users/${id}`,
            providesTags: (result, error, id) => [{ type: "UserList", id }], // Tag cho cache
          }),
        // getClassProgramById: builder.query({
        //   query: (id) => `training-program/get-training-program/${id}`,
        //   providesTags: (result, error, id) => [{ type: "ProgramList", id }],
        // }),
        // getAllSyllabusByIdTrainig: builder.query({
        //   query: (id) => `get_all_syllabuses/${id}`,
        //   providesTags: (result, error, id) => [{ type: "SyllabusList", id }],
        // }),
    }),
});

// Export hooks for usage in functional components, which are
// auto-generated based on the defined endpoints
// Hooks are auto-generated by RTK-Query
export const {
    useAddUserMutation,
    useEditUserMutation,
    useGetUserByIdQuery
} = userAPI;
